// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id        Int     @id @default(autoincrement())
  firstName String  
  lastName  String  
  birthdate DateTime?  // Nullable field for birthdate
  gender    String?    // Nullable field for gender
  addressId Int?       // Foreign key field to Address model
  address   Address?   @relation(fields: [addressId], references: [id], onDelete: Restrict)
  email     String     @unique
  appointments Appointment[]
  completion CompletionCache[]
}

model Address {
  id   Int    @id @default(autoincrement())
  fullAddress String
  clients Client[]
}

model Appointment {
  id               Int       @id @default(autoincrement())
  startTime        DateTime  
  endTime          DateTime  
  medspaId         Int
  medspa           MedSpa    @relation(fields: [medspaId], references: [id], onDelete: Restrict)
  clientId         Int?      
  client           Client?   @relation(fields: [clientId], references: [id], onDelete: Restrict)
  serviceMenuItems ServiceMenuItem[]
  note             String?   
  bookingFlow      String?   @default("") 
}

model MedSpa {
  id               Int        @id @default(autoincrement())
  name             String
  appointments     Appointment[]
  // Other fields related to MedSpa
}


model ServiceMenuItem {
  id               Int        @id @default(autoincrement())
  name            String  @unique
  inboundAppointments Appointment[]
  // Other fields related to ServiceMenuItem
}

model CompletionCache {
  id            Int       @id @default(autoincrement())
  clientId      Int       // Reference to the client
  client        Client    @relation(fields: [clientId], references: [id], onDelete: Cascade)
  completion    String    // The generated completion text
  createdAt     DateTime  @default(now())  // Timestamp for when the completion was created
  expirationAt  DateTime  // Timestamp for when the cache entry expires

  @@index([clientId, expirationAt])
}